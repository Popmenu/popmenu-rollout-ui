javascript:
    window.onload = () => {
        const percentInput = document.getElementById('percentage');
        const startingPercent = Number(percentInput.value);
        const cacheBreakToggle = document.getElementById('consumer_cache_break');

        cacheBreakToggle.onchange = ({ target }) => {
            let maxPercent = target.checked ? Math.min(100, startingPercent + 20) : 100;
            let minPercent = target.checked ? Math.max(startingPercent - 20, 0) : 0;
            percentInput.max = maxPercent.toString();
            percentInput.min = minPercent.toString();
        };
    };

a.text-sm.text-blue-600(href=index_path class='hover:text-blue-700 hover:underline')
  ' &larr; back to overview

- if params[:error]
  pre.text-red-500= params[:error]
h2.font-semibold.text-xl.text-gray-500.pt-12
  = @feature.name

.w-8.h-1.bg-gray-300.my-10
main.p-6.bg-gray-100.max-w-lg.w-full.text-sm.rounded-sm
  form#updateFormSubmit action=feature_path(@feature.name) method='POST'
    input type='hidden' name='last_updated_at' value=(@feature.data['updated_at'])
    .mb-5
      label.block.text-gray-500.mb-2(for='description') Description
      input.appearance-none.border.rounded-sm.w-full.py-2.px-4.text-gray-600.leading-relaxed.bg-white(
        name='description'
        id='description'
        value=@feature.data['description']
        class='hover:border-gray-500'
      )
    .mb-5.flex.items-center
      input(
        name='consumer_cache_break'
        value="false"
        hidden
      )
      input(
        name='consumer_cache_break'
        id='consumer_cache_break'
        value="true"
        type="checkbox"
        checked=(@feature.data['consumer_cache_break'].to_s == 'true' || @feature.data['consumer_cache_break'].nil?)
      )
      label.m-1.font-bold(for='consumer_cache_break')Consumer Cache Break
      div[class="tooltip cursor-pointer"]
        | INFO?
        div[class="tooltip-text p-2 rounded bg-white w-56 shadow-xl"]
          | Uncheck this box if you <b>do not</b> need a consumer-side cache break on activation.<br>
          | example scenarios:
          div
            ol [class="list-decimal pl-6"]
              li
                | The flag is <b>only</b> used on the admin side
              li
                | the cache break can wait until the next deployment

    .mb-5
      label.block.text-gray-500.mb-2(for='groups')
        | Groups
        span.ml-1.text-gray-400
          | (multi-select)
      select.block.appearance-none.w-full.bg-white.border.border-gray-300.px-4.py-3.rounded-sm.leading-relaxed(name="groups[]" id='groups' multiple=true size=(@rollout.groups.count + 1))
        option.py-1.px-1(value='' selected=(@feature.groups.count == 0))
          = '(none)'
        - @rollout.groups.each do |group|
          option.py-1.px-1(
            value=group
            selected=@feature.groups.include?(group)
          )
            = group

    .mb-5
      label.block.text-gray-500.mb-2(for='percentage') Percentage
      input.appearance-none.border.rounded-sm.w-full.py-2.px-4.text-gray-600.leading-relaxed.bg-white(
        name='percentage'
        id='percentage'
        value=@feature.percentage
        max="#{get_high_percent_activate(@feature)}"
        min="#{get_low_percent_activate(@feature)}"
        class='hover:border-gray-500'
        type='number'
        step='0.1'
      )

    .mb-5
      label.block.text-gray-500.mb-2 Users

      - if @feature.users.count > 150
        .appearance-none.border.rounded-sm.w-full.py-2.px-4.text-gray-600.leading-relaxed.bg-gray-100
          = @feature.users.count
      - else
        textarea.appearance-none.border.rounded-sm.w-full.py-2.px-4.text-gray-600.leading-relaxed.bg-white(
          name='users'
          id='users'
          value=@feature.users.join(', ')
          class='hover:border-gray-500'
          rows='2'
        )
          = @feature.users.join(', ')

  .flex.items-center.justify-end
    form action=delete_feature_path(@feature.name) method='POST'
      button.mr-5.text-gray-600(class='hover:underline' type='submit' onclick="return confirm('Are you sure you want to delete #{@feature.name}?')")
        | Delete
    button.py-4.px-5.bg-gray-700.text-gray-200.rounded-sm.font-bold.leading-none.transition-colors.duration-200(
      type='submit'
      class='hover:bg-gray-800'
      form='updateFormSubmit'
    )
      | Update

- history_events = @rollout.respond_to?(:logging) ? @rollout.logging.events(@feature.name).reverse : []




== slim :"features/partials/event_log", locals: { events: history_events }
